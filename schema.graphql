directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) on SCHEMA

directive @owner(graph: String!) on OBJECT

directive @key(fields: String!, graph: String!) on OBJECT

directive @resolve(graph: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

enum Class {
  BARD
  CLERIC
  FIGHTER
  PALADIN
  RANGER
  ROGUE
  WIZARD
}

input CreateLeagueInput {
  name: String!
  description: String!
  public: Boolean!
  password: String
  maxPlayers: Int!
  manualState: Boolean!
}

input CreatePlayerInput {
  name: String!
  league: ID!
  cost: Int!
  gender: Gender!
  race: Race!
  class: Class!
  handedness: Handedness!
  maxHealth: Int!
  strength: Int!
  dexterity: Int!
  constitution: Int!
  intelligence: Int!
  wisdom: Int!
  charisma: Int!
  traits: [Trait!]!
  hiddenTraits: [Trait!]
}

enum Gender {
  MALE
  FEMALE
}

enum Handedness {
  LEFT
  RIGHT
}

# A scalar that can represent any JSON Object value.
scalar JSONObject

type League {
  id: ID!
  name: String!
  description: String!
  status: LeagueStatus!
  public: Boolean!
  maxPlayers: Int!
  state: LeagueState!
  manualState: Boolean!
  owner: User!
  managers: [User!]!
  managersCount: Int!
  user: User!
  teams: [Team!]!
  players: [Player!]!
}

enum LeagueState {
  MANUAL
  CREATED
  DRAFTING
  SEASON_START
  PLAYOFFS
  REALM_SERIES
  SEASON_END
}

enum LeagueStatus {
  PLAYER_GENERATION
  PLAYERS_COMPLETED
}

type Lineup {
  first: String
  second: String
  third: String
  fourth: String
  fifth: String
  sixth: String
  seventh: String
  eighth: String
  ninth: String
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}

type LoginResponse {
  id: ID!
  username: String!
  email: String!
  role: String!
  token: String!
}

type LogoutResponse {
  status: String!
}

type MetaSelect {
  values: [String!]!
  labels: [String!]!
}

type Mutation {
  signup(newUser: SignupInput!): User!
  login(credentials: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  selectLeague(id: ID!): League!
  createLeague(input: CreateLeagueInput!): League!
  updateLeague(input: UpdateLeagueInput!): League!
  joinLeague(id: ID!): League!
  setLeagueState(id: ID!, state: LeagueState!): League!
  setLeagueStatus(id: ID!, status: LeagueStatus!): League!
  addManagerToLeague(leagueId: ID!, userId: ID!): League!
  createTeam(name: String!, leagueId: ID!): Team!
  setPlayerPosition(team: ID!, player: ID!, position: Position!): Team!
  modifyGold(id: ID!, cost: Int!): Team!
  createPlayer(input: CreatePlayerInput!): Player!
  setTeam(player: ID!, team: ID!): Player!
}

type Player {
  id: ID!
  name: String!
  league: League!
  team: Team
  cost: Int!
  gender: Gender!
  race: Race!
  class: Class!
  handedness: Handedness!
  health: Int!
  maxHealth: Int!
  strength: Int!
  dexterity: Int!
  constitution: Int!
  intelligence: Int!
  wisdom: Int!
  charisma: Int!
  traits: [Trait!]!
  hiddenTraits: [Trait!]
}

enum Position {
  RESERVE
  STARTING_PITCHER
  RELIEF_PITCHER
  CATCHER
  RESERVE_CATCHER
  FIRST_BASE
  SECOND_BASE
  THIRD_BASE
  SHORTSTOP
  INFIELD_RESERVE
  LEFT_FIELD
  CENTER_FIELD
  RIGHT_FIELD
  OUTFIELD_RESERVE
}

type Query {
  # Get current user info
  me: User!
  users(filter: JSONObject): [User!]!
  user(id: ID!): User!
  leagues(filter: JSONObject): [League!]!
  league(id: ID!): League!
  metaLeagueState: MetaSelect!
  teams(filter: JSONObject): [Team!]!
  team(id: ID!): Team!
  players(filter: JSONObject, sort: JSONObject): [Player!]!
  player(id: ID!): Player!
  metaClass: MetaSelect!
  metaRace: MetaSelect!
  metaGender: MetaSelect!
}

enum Race {
  DWARF
  ELF
  GOBLIN
  HALFLING
  HUMAN
  ORC
}

type Roster {
  startingPitcher: Player
  reliefPitchers: [Player!]!
  catcher: Player
  catcherReserves: [Player!]!
  firstBase: Player
  secondBase: Player
  thirdBase: Player
  shortstop: Player
  infieldReserves: [Player!]!
  leftField: Player
  centerField: Player
  rightField: Player
  outfieldReserves: [Player!]!
}

input SignupInput {
  username: String!
  email: String!
  password: String!
}

# Object Implementations
type Team {
  id: ID!
  name: String!
  owner: User!
  league: League!
  gold: Int!
  roster: Roster!
  lineup: Lineup!
  player: Player!
  players: [Player!]!
}

enum Trait {
  HOT_TEMPER
  LUCKY
  BORING
  SUCK_UP
  QUICK
  GREEDY
  CLEPTOMANIAC
  TOUGH
  CLUMSY
  SURE_SHOT
  LIGHTNING_ARM
  DIRTY
  LAZY
  FAT
  BELLIGERENT
  QUICK_WITTED
  GOON
  TIMID
  SWITCH
}

input UpdateLeagueInput {
  id: ID!
  description: String
  public: Boolean
  password: String
  maxPlayers: Int
  state: LeagueState
  status: LeagueStatus
}

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  selectedLeague: League
  joinedLeagues: [League!]!
  ownedLeagues: [League!]!
  teams: [Team!]!
}
