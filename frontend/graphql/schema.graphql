directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) on SCHEMA

directive @owner(graph: String!) on OBJECT

directive @key(fields: String!, graph: String!) on OBJECT

directive @resolve(graph: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

input AddManagerInput {
  id: String!
  userId: String!
}

input CreateLeagueInput {
  name: String!
  description: String!
  public: Boolean!
  password: String
  maxPlayers: Int!
  manualState: Boolean!
}

input CreateTeamInput {
  name: String!
  leagueId: ID!
}

type League {
  id: ID!
  name: String!
  description: String!
  public: Boolean!
  maxPlayers: Int!
  state: LeagueState!
  manualState: Boolean!
  owner: User!
  managers: [User!]!
  managersCount: Int!
  user: User!
  team: Team
}

input LeagueFilter {
  name: String
  public: Boolean
}

enum LeagueState {
  MANUAL
  CREATED
  DRAFTING
  SEASON_START
  PLAYOFFS
  REALM_SERIES
  SEASON_END
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}

type LoginResponse {
  id: ID!
  username: String!
  email: String!
  role: String!
  token: String!
}

type LogoutResponse {
  status: String!
}

type Mutation {
  signup(newUser: SignupInput!): User!
  login(credentials: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  selectLeague(id: ID!): League!
  createLeague(input: CreateLeagueInput!): League!
  joinLeague(id: ID!): League!
  addManagerToLeague(input: AddManagerInput!): League!
  createTeam(input: CreateTeamInput!): Team!
}

type Query {
  # Get current user info
  me: User!
  users: [User!]!
  user(id: ID!): User!
  leagues(filter: LeagueFilter): [League!]!
  league(id: ID!): League!
  teams: [Team!]!
  team(id: ID!): Team!
}

input SignupInput {
  username: String!
  email: String!
  password: String!
}

# Object Implementations
type Team {
  id: ID!
  name: String!
  owner: User!
  league: League!
}

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  selectedLeague: League
  joinedLeagues: [League!]!
  ownedLeagues: [League!]!
  teams: [Team!]!
}
