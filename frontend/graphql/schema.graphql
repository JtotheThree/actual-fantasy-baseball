directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) on SCHEMA

directive @owner(graph: String!) on OBJECT

directive @key(fields: String!, graph: String!) on OBJECT

directive @resolve(graph: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

input AddUserInput {
  id: String!
  userId: String!
}

input CreateLeagueInput {
  name: String!
}

type League {
  id: ID!
  name: String!
  owner: User!
  users: [User!]!
  user: User!
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}

type LoginResponse {
  id: ID!
  username: String!
  email: String!
  role: String!
  token: String!
}

type LogoutResponse {
  status: String!
}

type Mutation {
  signup(newUser: SignupInput!): User!
  login(credentials: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  selectLeague(id: ID!): League!
  createLeague(input: CreateLeagueInput!): League!
  addUserToLeague(input: AddUserInput!): League!
}

type Query {
  # Get current user info
  me: User!
  users: [User!]!
  user(id: ID!): User!
  leagues: [League!]!
  league(id: ID!): League!
}

input SignupInput {
  username: String!
  email: String!
  password: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  selectedLeague: League
  joinedLeagues: [League!]!
  ownedLeagues: [League!]!
}
